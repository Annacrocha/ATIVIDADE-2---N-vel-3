#include <stdio.h>
#include <stdbool.h>
#include <locale.h>
#define N 9

// Função para imprimir o tabuleiro de Sudoku
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Função para verificar se um número pode ser colocado em uma célula
bool isSafe(int board[N][N], int row, int col, int num) {
    // Verifica se o número já está presente na linha
    for (int x = 0; x < N; x++) {
        if (board[row][x] == num) {
            return false;
        }
    }

    // Verifica se o número já está presente na coluna
    for (int x = 0; x < N; x++) {
        if (board[x][col] == num) {
            return false;
        }
    }

    // Verifica se o número já está presente no subquadrante 3x3
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Função recursiva para resolver o Sudoku usando backtracking
bool solveSudoku(int board[N][N]) {
    int row, col;

    // Encontra uma célula vazia
    bool empty = false;
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (board[row][col] == 0) {
                empty = true;
                break;
            }
        }
        if (empty) {
            break;
        }
    }

    // Se não houver células vazias, o Sudoku está resolvido
    if (!empty) {
        return true;
    }

    // Tenta números de 1 a 9 para a célula vazia encontrada
    for (int num = 1; num <= 9; num++) {
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;

            // Chama recursivamente a função para a próxima célula
            if (solveSudoku(board)) {
                return true;
            }

            // Se a solução não for encontrada, desfaz a escolha (backtracking)
            board[row][col] = 0;
        }
    }

    return false;
}

int main() {
	setlocale(LC_ALL, "portuguese");
    // Tabuleiro de Sudoku com células vazias representadas por 0
    int board[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(board)) {
        printf("Sudoku resolvido:\n");
        printBoard(board);
    } else {
        printf("Não foi possível resolver o Sudoku.\n");
    }

    return 0;
}
